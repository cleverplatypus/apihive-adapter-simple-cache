import{af as O,z as w,d as U,x as D,ag as M,c as g,o as y,j as k,ah as P,ai as T,k as u,G as b,H as A,t as m,$ as j,e as S,n as q,_ as z,I as N,J as _,aj as $,a as J,w as V}from"./chunks/framework.BhQtNlID.js";const d=O({fetchCount:0,runServiceCount:0,result:null,currentEndpoint:"userById",currentEndpointParams:{userId:1},expirations:{},currentRequestHash:""}),B={none:-1,trace:0,debug:1,info:2,warn:3,error:4,fatal:5};class x{constructor(){this.level="trace"}withMinimumLevel(s){return this.level=s,new Proxy(this,{get:(e,t)=>t==="withMinimumLevel"?i=>e.withMinimumLevel(i):t in B?B[t]>=B[this.level]?(...a)=>e[t](...a):()=>{}:e[t]})}trace(s,...e){console.trace(s,...e)}debug(s,...e){console.debug(s,...e)}info(s,...e){console.info(s,...e)}warn(s,...e){console.warn(s,...e)}error(s,...e){console.error(s,...e)}fatal(s,...e){console.error(s,...e)}}class I extends Error{constructor(s,e,t){super(e),this.code=s,this.message=e,this.body=t}isUnauthorized(){return this.code===401}isNotFound(){return this.code===404}isForbidden(){return this.code===403}isMethodNotAllowed(){return this.code===405}isConflict(){return this.code===409}isTooManyRequests(){return this.code===429}isInternalServerError(){return this.code===500}isNotImplemented(){return this.code===501}isTimedOut(){return this.code===504}isAborted(){return this.code===-1}}function F(l,...s){return typeof l=="function"?l(...s):l}const G=["^application/(?:.+\\+)?json$"],Q=["^text/.*$","^application/.*\\+xml$","^image/.*\\+xml$","^application/javascript$","^application/xml$","application/x-www-form-urlencoded"];async function v(l,s){const e=s.responseBodyTransformers||[];if(!e.length)return l;let t=l;for(const i of e)t=await i(t,s);return t}function W({templateURLHistory:l,urlParams:s,queryParams:e,config:t}){let a=l[l.length-1];for(const h in s){const p=s[h],o=F(p,t);a=a.replace(`{{${h}}}`,String(o))}const n=new URL(a,a.startsWith("http")?void 0:"http://dummy");for(const h of Object.keys(e)){const p=e[h],o=F(p,t);if(o!=null)if(Array.isArray(o))for(const c of o)n.searchParams.append(h,String(c));else n.searchParams.append(h,String(o))}const r=n.toString();if(!a.startsWith("http")){const h=r.indexOf("://"),p=r.indexOf("/",h+3);return r.slice(p)}return r}class K{get abortController(){return this._abortController}constructor({url:s,method:e,defaultConfigBuilders:t,featureDelegates:i,factoryMethods:a,factory:n,wrapErrors:r=!1}){this.wasUsed=!1,this.logger=new x,this.fetchBody=null,this._abortController=new AbortController,this.readOnlyConfig=null,this.beforeFetchHooks=[],this.abortListeners=[],this.wrapErrors=!1,this.readResponse=async h=>{var p,o;const c=(p=h.headers.get("content-type"))===null||p===void 0?void 0:p.split(/;\s?/)[0];return c?this.config.jsonMimeTypes.find(E=>new RegExp(E).test(c))?h.json():this.config.textMimeTypes.find(E=>new RegExp(E).test(c))?await h.text():!((o=this.config.progressHandlers)===null||o===void 0)&&o.find(E=>!!E.download)?(this.factoryMethods.requireFeature("download-progress"),this.featureDelegates.handleDownloadProgress({response:h,abortController:this._abortController,config:this.getReadOnlyConfig()})):await h.blob():(this.getLogger().info("No content-type header found for response"),null)},this.configBuilders=t,this.wasUsed=!1,this.config=this.createConfigObject(s,e),this.featureDelegates=i,this.factory=n,this.factoryMethods=a,this.wrapErrors=r}createConfigObject(s,e){const t={templateURLHistory:[s],headers:{},body:null,timeout:0,ignoreResponseBody:!1,method:e,jsonMimeTypes:[...G],textMimeTypes:[...Q],credentials:"same-origin",logLevel:"error",corsMode:"cors",meta:{},queryParams:{},expectedResponseFormat:"auto",acceptedMIMETypes:["*/*"],urlParams:{},errorInterceptors:[],responseInterceptors:[],requestInterceptors:[],responseBodyTransformers:[],progressHandlers:[]};return Object.defineProperty(t,"templateURL",{get:()=>t.templateURLHistory[t.templateURLHistory.length-1],configurable:!1,enumerable:!0}),t}isFinalized(){return typeof this.finalizedURL=="string"}throwIfFinalized(){if(this.isFinalized())throw new Error("The request has already been finalised. Request modification is not allowed.")}getLogger(){return this.logger.withMinimumLevel(this.config.logLevel)}setupHeaders(){var s;const e=this.config.headers;for(let t in e)e[t]=F(e[t],this),(s=e[t])!==null&&s!==void 0||delete e[t];this.fetchBody.headers=e}setupTimeout(){this.config.timeout&&(this.timeoutID=setTimeout(()=>{this.getLogger().debug("HttpRequestFactory : Fetch timeout",`Request timeout after ${this.config.timeout/1e3} seconds`),this._abortController.abort()},this.config.timeout)),this.getLogger().debug("HttpRequestFactory : Fetch invoked",this.fetchBody)}registerAbortListeners(){this._abortController.signal.addEventListener("abort",s=>{for(const e of this.abortListeners)e(s)})}setupBody(){this.config.body&&(["GET","HEAD","DELETE","TRACE"].includes(this.config.method)&&this.getLogger().warn("HTTPRequest.replaceBody","HEAD, DELETE, GET or TRACE requests do not have a body"),this.fetchBody.body=this.config.body())}composeURL(){return W({templateURLHistory:this.config.templateURLHistory,urlParams:this.config.urlParams,queryParams:this.config.queryParams,config:this.config})}async execute(){var s,e,t;if(this.wasUsed)throw new Error("HttpRequests cannot be reused. Please call a request factory method for every new call");const i=this.getLogger();this.configBuilders.forEach(n=>{n(this,this.getReadOnlyConfig())}),this.fetchBody={method:this.config.method,mode:this.config.corsMode,credentials:this.config.credentials},this.fetchBody.signal=this._abortController.signal;let a;try{this.setupHeaders(),this.setupTimeout(),this.wasUsed=!0;const n=this.createRequestInterceptorControls();for(const h of this.config.requestInterceptors||[]){let p=!1,o=await h({config:this.getReadOnlyConfig(),controls:{...n,skipBodyTransformers:()=>{p=!0}},factory:this.factory});if(o!==void 0)return p||(o=await v(o,this.getReadOnlyConfig())),this.wrapErrors?{response:o}:o}this.setupBody(),this.finalizedURL=this.composeURL(),i.debug("HttpRequestFactory : Fetch url to be called",this.finalizedURL),!((s=this.config.progressHandlers)===null||s===void 0)&&s.find(h=>!!h.upload)&&this.factoryMethods.requireFeature("upload-progress");for(const h of this.beforeFetchHooks)await h(this.fetchBody,this.config);const r=((t=(e=this.featureDelegates).getFetchImpl)===null||t===void 0?void 0:t.call(e,this.getReadOnlyConfig()))||globalThis.fetch;if(this.registerAbortListeners(),a=await r(this.finalizedURL,this.fetchBody),i.trace("HttpRequestFactory : Fetch response",a),this.config.responseInterceptors.length){const h=this.createResponseControls();for(const p of this.config.responseInterceptors){let o=!1,c=await p({response:a,config:this.getReadOnlyConfig(),controls:{...h,skipBodyTransformers:()=>{o=!0}},factory:this.factory});if(c!==void 0)return o||(c=await v(c,this.getReadOnlyConfig())),this.wrapErrors?{response:c}:c}}if(a.ok){if(this.config.ignoreResponseBody||a.status===204)return this.wrapErrors?{response:void 0}:void 0;let h=await this.readResponse(a);return h=await v(h,this.getReadOnlyConfig()),this.wrapErrors?{response:h}:h}else{const h=new I(a.status,a.statusText,await this.readResponse(a));for(const p of this.config.errorInterceptors||[])if(await p(h))break;return this.wrapErrors?{error:h}:Promise.reject(h)}}catch(n){if(n.name==="AbortError"){const h=new I(-1,"Request aborted");for(const p of this.config.errorInterceptors||[])if(await p(h))break;return this.wrapErrors?{error:h}:Promise.reject(h)}i.error("HttpRequestFactory : Fetch error",{type:"fetch-error",endpoint:this.composeURL(),details:n});const r=new I(-1,n.message||"Network error",n);for(const h of this.config.errorInterceptors||[])if(await h(r))break;return this.wrapErrors?{error:r}:Promise.reject(r)}finally{clearTimeout(this.timeoutID)}}getReadOnlyConfig(){if(this.readOnlyConfig)return this.readOnlyConfig;const s=this.config,e=new Proxy(s,{get:(t,i)=>{if(i==="finalURL"){if(!this.isFinalized()){this.getLogger().warn("HttpRequestFactory : Access to finalURL before URL finalisation",{type:"final-url-access-before-finalise"});return}return this.finalizedURL}if(i==="templateURL")return t.templateURLHistory[t.templateURLHistory.length-1];if(i==="body")try{return F(t.body,e)}catch(a){return this.getLogger().warn("HttpRequestFactory : Error evaluating body",{type:"body-error",endpoint:s.templateURL,details:a}),null}if(i==="headers"){const a=t.headers||{};return new Proxy(a,{get:(n,r)=>{const h=n[r];try{return F(h,e)}catch(p){this.getLogger().warn("HttpRequestFactory : Error evaluating header",{type:"header-error",key:String(r),endpoint:s.templateURL,details:p});return}},ownKeys:n=>Object.keys(n),getOwnPropertyDescriptor:(n,r)=>{if(Object.prototype.hasOwnProperty.call(n,r)){let h;try{h=F(n[r],e)}catch(p){this.getLogger().warn("HttpRequestFactory : Error evaluating header",{type:"header-error",key:String(r),endpoint:s.templateURL,details:p}),h=void 0}return{enumerable:!0,configurable:!1,writable:!1,value:h}}},set:()=>!1,deleteProperty:()=>!1})}return t[i]},set:()=>!1,deleteProperty:()=>!1});return this.readOnlyConfig=e,this.readOnlyConfig}createRequestInterceptorControls(){return{abort:()=>{this.timeoutID&&clearTimeout(this.timeoutID),this._abortController.abort()},replaceURL:s=>{this.throwIfFinalized(),s&&this.config.templateURLHistory.push(s)},replaceURLParams:s=>{this.throwIfFinalized(),s&&(this.config.urlParams=s)},getProvisionalURL:()=>this.composeURL(),updateHeaders:s=>{this.throwIfFinalized(),Object.assign(this.config.headers,s),this.setupHeaders()},finaliseURL:()=>(this.isFinalized()||(this.finalizedURL=this.composeURL()),this.finalizedURL),replaceBody:s=>{this.throwIfFinalized();const e=this.config.body();this.config.body=()=>s(e)},getHash:s=>(this.factoryMethods.requireFeature("request-hash"),this.getHash(s)),getLogger:()=>this.getLogger(),skipBodyTransformers:()=>null}}createResponseControls(){return{getLogger:()=>this.getLogger(),getHash:s=>this.getHash(s)}}withMeta(s,e){return this.throwIfFinalized(),typeof s=="string"?this.config.meta[s]=e:typeof s=="object"&&Object.assign(this.config.meta,s),this}withLogger(s){return this.throwIfFinalized(),this.logger=s,this}withCredentialsPolicy(s){return this.throwIfFinalized(),this.config.credentials=s,this}blank(){return this.throwIfFinalized(),this.configBuilders.splice(0,this.configBuilders.length),this}withAbortListener(s){return this.abortListeners.push(s),this}withAccept(...s){return this.throwIfFinalized(),this.config.acceptedMIMETypes=s,this}withURLParam(s,e){return this.throwIfFinalized(),this.config.urlParams[s]=e,this}withURLParams(s){return this.throwIfFinalized(),Object.assign(this.config.urlParams,s),this}withFormEncodedBody(s){return this.throwIfFinalized(),this.withHeader("content-type","application/x-www-form-urlencoded"),this.config.body=()=>s,this}withErrorInterceptors(...s){return this.throwIfFinalized(),this.config.errorInterceptors.push(...s),this}withRequestInterceptors(...s){return this.throwIfFinalized(),this.config.requestInterceptors.push(...s),this}withJSONBody(s){return this.throwIfFinalized(),this.withHeader("content-type","application/json"),this.config.body=()=>{switch(typeof s){case"string":try{return JSON.parse(s),s}catch{}break;case"object":return JSON.stringify(s)}this.getLogger().error("POSTHttpRequest.withJSONBody","Passed body is not a valid JSON string",s)},this}withFormDataBody(s=()=>{throw new Error("No composer callback provided")}){return this.throwIfFinalized(),this.config.body=()=>{const e=new FormData;return s(e),e},this}withAcceptAny(){return this.throwIfFinalized(),this.config.acceptedMIMETypes=["*/*"],this}ignoreResponseBody(){return this.throwIfFinalized(),this.config.ignoreResponseBody=!0,this}withQueryParams(s){return this.throwIfFinalized(),Object.assign(this.config.queryParams,s),this}withQueryParam(s,e){return this.throwIfFinalized(),this.config.queryParams[s]=e,this}withNoCors(){return this.throwIfFinalized(),this.config.corsMode="no-cors",this}withJSONMimeTypes(...s){return this.throwIfFinalized(),this.config.jsonMimeTypes=[...this.config.jsonMimeTypes,...s],this}withTextMimeTypes(...s){return this.throwIfFinalized(),this.config.textMimeTypes=[...this.config.textMimeTypes,...s],this}withLogLevel(s){return this.throwIfFinalized(),this.config.logLevel=s,this}withHeaders(s){if(this.throwIfFinalized(),typeof s=="object"){const e=Object.fromEntries(Object.entries(s).map(([t,i])=>[t.toLowerCase(),i]));Object.assign(this.config.headers,e)}return this}withHeader(s,e){return this.throwIfFinalized(),this.config.headers[s.toLowerCase()]=e,this}withResponseBodyTransformers(...s){return this.throwIfFinalized(),this.config.responseBodyTransformers.push(...s),this}withTimeout(s){return this.throwIfFinalized(),this.config.timeout=s,this}withResponseInterceptors(...s){return this.config.responseInterceptors.push(...s),this}getHash(s){return this.factoryMethods.requireFeature("request-hash"),this.featureDelegates.getHash(this,s)}withProgressHandlers(...s){return s.some(e=>e.download)&&this.factoryMethods.requireFeature("download-progress"),s.some(e=>e.upload)&&this.factoryMethods.requireFeature("upload-progress"),this.config.progressHandlers.push(...s),this}withBeforeFetchHook(s){return this.beforeFetchHooks.push(s),this}}class Y{constructor(){this.requestDefaults=[],this.sseRequestDefaults=[],this.apiConfigs={},this._logger=new x,this._logLevel="error",this.afterRequestCreatedHooks=[],this.enabledFeatures=new Map,this.interceptorsToRequestDefaults=new Map,this.interceptorsToResponseDefaults=new Map,this.requestDelegates={},this.factoryDelegates={},this.wrapErrors=!1,this.baseURL=null}get logger(){return this._logger}get logLevel(){return this._logLevel}use(s){var e;if(this.enabledFeatures.has(s.name))return this._logger.info(`Feature "${s.name}" already enabled`),this;if(this.enabledFeatures.set(s.name,s),(e=s.apply)===null||e===void 0||e.call(s,this,{addRequestDefaults:(...t)=>{this.requestDefaults.push(...t)},removeRequestDefaults:(...t)=>{this.requestDefaults=this.requestDefaults.filter(i=>!t.includes(i))},afterRequestCreated:t=>{this.afterRequestCreatedHooks.push(t)},beforeFetch:t=>{this.requestDefaults.push(i=>i.withBeforeFetchHook(t))}}),s.getDelegates){const t=s.getDelegates(this);t.request&&Object.assign(this.requestDelegates,t.request),t.factory&&Object.assign(this.factoryDelegates,t.factory)}return this}requireFeature(s){if(!this.enabledFeatures.has(s))throw new Error(`Feature "${s}" not enabled. Call factory.use(featureObj).`)}withWrappedResponseError(){return this.wrapErrors=!0,this}withLogger(s){return this._logger=s,this.requestDefaults.push(e=>e.withLogger(s)),this.sseRequestDefaults.push(e=>e.withLogger(s)),this}withLogLevel(s){return this._logLevel=s,this.requestDefaults.push(e=>e.withLogLevel(s)),this.sseRequestDefaults.push(e=>e.withLogLevel(s)),this}withAccept(...s){return this.requestDefaults.push(e=>e.withAccept(...s)),this}withQueryParams(s){return this.requestDefaults.push(e=>e.withQueryParams(s)),this.sseRequestDefaults.push(e=>e.withQueryParams(s)),this}withQueryParam(s,e){return this.requestDefaults.push(t=>t.withQueryParam(s,e)),this.sseRequestDefaults.push(t=>t.withQueryParam(s,e)),this}withURLParams(s){return this.requestDefaults.push(e=>e.withURLParams(s)),this.sseRequestDefaults.push(e=>e.withURLParams(s)),this}withURLParam(s,e){return this.requestDefaults.push(t=>t.withURLParam(s,e)),this.sseRequestDefaults.push(t=>t.withURLParam(s,e)),this}withHeader(s,e){return this.requestDefaults.push(t=>t.withHeader(s,e)),this}withHeaders(s){if(typeof s=="object")for(const e of Object.keys(s))this.requestDefaults.push(t=>t.withHeader(e,s[e]));return this}withCredentialsPolicy(s){return this.requestDefaults.push(e=>e.withCredentialsPolicy(s)),this}withBaseURL(s){return this.baseURL=s,this}withRequestInterceptors(...s){for(const e of s){const t=function(i){i.withRequestInterceptors(e)};this.requestDefaults.push(t),this.interceptorsToRequestDefaults.set(e,t)}return this}withResponseInterceptors(...s){for(const e of s){const t=function(i){i.withResponseInterceptors(e)};this.requestDefaults.push(t),this.interceptorsToResponseDefaults.set(e,t)}return this}withErrorInterceptors(...s){return this.requestDefaults.push(e=>{e.withErrorInterceptors(...s)}),this.sseRequestDefaults.push(e=>{e.withErrorInterceptors(...s)}),this}withResponseBodyTransformers(...s){return this.requestDefaults.push(...s.map(e=>t=>t.withResponseBodyTransformers(e))),this}withJSONMimeTypes(...s){return this.requestDefaults.push(e=>{e.withJSONMimeTypes(...s)}),this}withTextMimeTypes(...s){return this.requestDefaults.push(e=>{e.withTextMimeTypes(...s)}),this}withProgressHandlers(...s){return s.some(e=>e.download)&&!this.requestDelegates.handleDownloadProgress&&this.requireFeature("download-progress"),s.some(e=>e.upload)&&!this.requestDelegates.handleUploadProgress&&this.requireFeature("upload-progress"),this.requestDefaults.push(e=>e.withProgressHandlers(...s)),this}withAbortListener(s){return this.requestDefaults.push(e=>{e.withAbortListener(s)}),this}always(){return this}when(s){return new Proxy(this,{get:(t,i)=>i==="always"?()=>t:i==="when"?a=>t.when(a):typeof t[i]=="function"&&i.toString().startsWith("with")?(...a)=>{const n=(r,h)=>{s(h)&&r[i](...a)};return this.requestDefaults.push(n),this}:t[i]})}deleteRequestInterceptor(s){const e=this.interceptorsToRequestDefaults.get(s);this.requestDefaults.splice(this.requestDefaults.indexOf(e),1)}deleteResponseInterceptor(s){const e=this.interceptorsToResponseDefaults.get(s);this.requestDefaults.splice(this.requestDefaults.indexOf(e),1)}createRequest(s,e="GET"){s=this.computeURL(s);const t=this.requestDelegates,i=new K({url:s,method:e,defaultConfigBuilders:this.requestDefaults,featureDelegates:t,factory:this,factoryMethods:{requireFeature:this.requireFeature.bind(this)},wrapErrors:this.wrapErrors});return this.afterRequestCreatedHooks.forEach(a=>a(i)),i}createGETRequest(s){return this.createRequest(s,"GET")}createPOSTRequest(s){return this.createRequest(s,"POST")}createPUTRequest(s){return this.createRequest(s,"PUT")}createDELETERequest(s){return this.createRequest(s,"DELETE")}createPATCHRequest(s){return this.createRequest(s,"PATCH")}createHEADRequest(s){return this.createRequest(s,"HEAD")}createTRACERequest(s){return this.createRequest(s,"TRACE")}createSSERequest(s){this.requireFeature("sse-request");const e=this.computeURL(s);return this.factoryDelegates.createSSERequest(e,{defaultConfigBuilders:this.sseRequestDefaults,wrapErrors:this.wrapErrors})}withAPIConfig(...s){return s.forEach(e=>{this.apiConfigs[e.name]=e}),this}computeAPIRequestCommons(...s){const[e,t]=s.length===1?["default",s[0]]:s;this._logger.withMinimumLevel(this._logLevel).trace("Creating API request",e,t);const i=this.apiConfigs[e],a=i?.endpoints[t];if(!a)throw new Error(`Endpoint ${t} not found in API ${e}`);const n=this.getEndpointURL(a,i),r=this.constructMeta(i,t,a);return{url:n,meta:r,api:i,endpoint:a}}createSSEAPIRequest(...s){this.requireFeature("sse-request");const{url:e,meta:t,api:i}=this.computeAPIRequestCommons(...s),a=this.createSSERequest(e).withMeta(t);return this.applyAPIDefaultsToRequest(i,a),a}createAPIRequest(...s){const{url:e,meta:t,api:i,endpoint:a}=this.computeAPIRequestCommons(...s),n=this.createRequest(e,a.method||"GET").withMeta(t).withHeaders(i.headers||{});return this.applyAPIDefaultsToRequest(i,n),n}withAdapter(s,e){return this.requireFeature("adapters"),this.factoryDelegates.withAdapter(s,e)}withSSEListeners(...s){return this.requireFeature("sse-request"),this.sseRequestDefaults.push(e=>e.withSSEListeners(...s)),this}async detachAdapter(s){return this.requireFeature("adapters"),this.factoryDelegates.detachAdapter(s)}getAttachedAdapters(){return this.requireFeature("adapters"),this.factoryDelegates.getAttachedAdapters()}hasAdapter(s){return this.requireFeature("adapters"),this.factoryDelegates.hasAdapter(s)}applyAPIDefaultsToRequest(s,e){const t=["responseBodyTransformers","requestInterceptors","responseInterceptors","errorInterceptors","progressHandlers","SSEListeners"];for(const i of t){const a=s[i];if(!a)continue;const n=Array.isArray(a)?a:[a],r="with"+i.charAt(0).toUpperCase()+i.slice(1);e[r]&&e[r](...n)}}computeURL(s){const e=n=>/^(https?:)?\/\//.test(n);if(e(s)||!this.baseURL)return s;const t=this.baseURL;if(e(t))return new URL(s,t).toString();const i=t.replace(/\/+$/,""),a=s.replace(/^\/+/,"");return`${i}/${a}`}constructMeta(s,e,t){const i={api:{name:s.name,baseURL:s.baseURL,apiMeta:s.meta||{},endpoint:t,endpointName:e}};Object.defineProperty(i,"api",{writable:!1,configurable:!1,enumerable:!0});try{Object.assign(i,s.meta||{},t.meta||{})}catch(a){const n=[];("api"in(s.meta||{})||"api"in(t.meta||{}))&&n.push("You're trying to assign the reserved `api` property name to meta"),this._logger.error("Unable to merge meta",...n,a)}return i}getEndpointURL(s,e){if(/^(https?:)?\/\//.test(s.target))return s.target;let t=null;return e.baseURL&&(t=typeof e.baseURL=="function"?e.baseURL(s):e.baseURL),t?`${t}${s.target}`:s.target}}class X{constructor(){this.name="adapters",this.factoriesInstanceInfo=new WeakMap}updateAdapterInterceptorApplier(s){s.adapterInterceptorApplier&&s.factoryCommands.removeRequestDefaults(s.adapterInterceptorApplier),s.adapterInterceptorApplier=e=>{const t=s.adapterRequestInterceptors.map(n=>n.interceptor),i=s.adapterResponseInterceptors.map(n=>n.entry),a=s.adapterErrorInterceptors.map(n=>n.interceptor);t.length>0&&e.withRequestInterceptors(...t),i.length>0&&e.withResponseInterceptors(...i),a.length>0&&e.withErrorInterceptors(...a)},(s.adapterRequestInterceptors.length>0||s.adapterResponseInterceptors.length>0||s.adapterErrorInterceptors.length>0)&&s.factoryCommands.addRequestDefaults(s.adapterInterceptorApplier)}registerAdapterInterceptors(s,e,t){var i,a,n;const r=((i=s.getRequestInterceptors)===null||i===void 0?void 0:i.call(s))||[];for(const o of r)t.adapterRequestInterceptors.push({interceptor:o,priority:e.requestInterceptor});t.adapterRequestInterceptors.sort((o,c)=>o.priority-c.priority);const h=((a=s.getResponseInterceptors)===null||a===void 0?void 0:a.call(s))||[];for(const o of h)t.adapterResponseInterceptors.push({entry:o,priority:e.responseInterceptor});t.adapterResponseInterceptors.sort((o,c)=>o.priority-c.priority);const p=((n=s.getErrorInterceptors)===null||n===void 0?void 0:n.call(s))||[];for(const o of p)t.adapterErrorInterceptors.push({interceptor:o,priority:e.errorInterceptor});t.adapterErrorInterceptors.sort((o,c)=>o.priority-c.priority),this.updateAdapterInterceptorApplier(t)}unregisterAdapterInterceptors(s,e){var t,i,a;const n=((t=s.getRequestInterceptors)===null||t===void 0?void 0:t.call(s))||[],r=((i=s.getResponseInterceptors)===null||i===void 0?void 0:i.call(s))||[],h=((a=s.getErrorInterceptors)===null||a===void 0?void 0:a.call(s))||[];e.adapterRequestInterceptors=e.adapterRequestInterceptors.filter(o=>!n.includes(o.interceptor));const p=new Set(r);e.adapterResponseInterceptors=e.adapterResponseInterceptors.filter(o=>!p.has(o.entry)),e.adapterErrorInterceptors=e.adapterErrorInterceptors.filter(o=>!h.includes(o.interceptor)),this.updateAdapterInterceptorApplier(e)}apply(s,e){const t={adapters:new Map,factoryCommands:e,adapterInterceptorApplier:null,adapterRequestInterceptors:[],adapterResponseInterceptors:[],adapterErrorInterceptors:[],addedFactoryDefaults:new Map};this.factoriesInstanceInfo.set(s,t)}getDelegates(s){const e={};return e.withAdapter=(t,i)=>{var a,n;const r=this.factoriesInstanceInfo.get(s);if(r.adapters.has(t.name))throw new Error(`Adapter '${t.name}' is already attached`);if(t.use&&Array.isArray(t.use)&&t.use.length)for(const E of t.use)s.use(E),s.logger.withMinimumLevel(s.logLevel).info(`Feature '${E.name}' auto-enabled by adapter '${t.name}'`);const p={...{requestInterceptor:500,responseInterceptor:500,errorInterceptor:500},...t.priority,...i?.priority},o={adapter:t,priority:p,attached:!1};(a=t.onAttach)===null||a===void 0||a.call(t,s),this.registerAdapterInterceptors(t,p,r);const c=((n=t.getFactoryDefaults)===null||n===void 0?void 0:n.call(t))||[];return r.factoryCommands.addRequestDefaults(...c),r.addedFactoryDefaults.set(t.name,c),o.attached=!0,r.adapters.set(t.name,o),s.logger.withMinimumLevel(s.logLevel).debug(`Adapter '${t.name}' attached successfully`),s},e.detachAdapter=t=>{var i,a;const n=this.factoriesInstanceInfo.get(s),r=n.adapters.get(t);if(!r)throw new Error(`Adapter '${t}' is not attached`);this.unregisterAdapterInterceptors(r.adapter,n);const h=n.addedFactoryDefaults.get(t)||[];return h.length&&(n.factoryCommands.removeRequestDefaults(...h),n.addedFactoryDefaults.delete(t)),(a=(i=r.adapter).onDetach)===null||a===void 0||a.call(i,s),n.adapters.delete(t),s.logger.withMinimumLevel(s.logLevel).debug(`Adapter '${t}' detached successfully`),s},e.hasAdapter=t=>this.factoriesInstanceInfo.get(s).adapters.has(t),e.getAttachedAdapters=()=>{const t=this.factoriesInstanceInfo.get(s);return Array.from(t.adapters.keys())},{factory:e}}}const Z=new X;function ss(l){return ArrayBuffer.isView(l)&&!(l instanceof DataView)}function es(l){for(const[,s]of l.entries())if(s instanceof File||s instanceof Blob)return!0;return!1}function ts(l,s,e){if(l instanceof Blob||typeof File<"u"&&l instanceof File||l instanceof ArrayBuffer||ss(l)||typeof ReadableStream<"u"&&l instanceof ReadableStream)return!0;if(l instanceof FormData)return es(l);if(s){const t=s.toLowerCase();return!e?.some(a=>new RegExp(a).test(t))}return!1}function R(l){return l==null||typeof l!="object"?JSON.stringify(l):Array.isArray(l)?"["+l.map(t=>R(t)).join(",")+"]":"{"+Object.keys(l).sort().map(t=>{const i=R(l[t]);return`"${t}":${i}`}).join(",")+"}"}function is(l){let s=5381;for(let e=0;e<l.length;e++)s=(s<<5)+s+l.charCodeAt(e),s=s&s;return(s>>>0).toString(16)}class as{constructor(){this.name="request-hash",this.hashes=new WeakMap}getDelegates(s){return{request:{getHash:(e,t={includeBody:!1})=>{const i=t.includeBody?"withBody":"withoutBody";if(this.hashes.has(e)&&this.hashes.get(e)[i])return this.hashes.get(e)[i];const a=e.getReadOnlyConfig(),n=a.headers["content-type"],r=F(a.body,e);if(ts(r,n,[...a.textMimeTypes,...a.jsonMimeTypes]))throw new Error("Hashing binary request bodies are not supported");if(!a.finalURL)throw new Error("Request URL is not finalised. Hashing is only valid after URL finalisation (happens during execute()).");const p={method:a.method,url:a.finalURL,queryParams:a.queryParams,urlParams:a.urlParams,body:null,relevantHeaders:{}};if(r&&t.includeBody)if(r instanceof FormData){const f=Array.from(r.entries()).sort();p.body=JSON.stringify(f)}else if(typeof r=="string")try{const f=JSON.parse(r);p.body=R(f)}catch{p.body=r}else p.body=r;const o=["content-type","accept","accept-language","accept-encoding"];for(const f of o){const C=a.headers[f]||a.headers[f.toLowerCase()];C!==void 0&&(p.relevantHeaders[f.toLowerCase()]=typeof C=="function"?C(e.getReadOnlyConfig()):C)}const c=R(p),E=is(c),H=this.hashes.get(e)||{};return this.hashes.set(e,{...H,[i]:E}),E}}}}}const ns=new as;function rs(l){return typeof l<"u"&&!(typeof l=="number"||typeof l=="object"&&l!==null&&(typeof l.ttlSeconds=="number"||typeof l.hashBody=="boolean"))}class hs{constructor(s,e="entries"){this.dbPromise=null,this.dbName=s,this.storeName=e}get supported(){return typeof indexedDB<"u"}async open(){if(!this.supported)throw new Error("IndexedDB not available");return this.dbPromise?this.dbPromise:(this.dbPromise=new Promise((s,e)=>{const t=indexedDB.open(this.dbName,1);let i=!1;const a=r=>{i||(i=!0,s(r))},n=r=>{i||(i=!0,e(r))};t.onupgradeneeded=()=>{const r=t.result;r.objectStoreNames.contains(this.storeName)||r.createObjectStore(this.storeName,{keyPath:"hash"}).createIndex("expiresAt","expiresAt",{unique:!1});const h=t.transaction||null;h&&(h.oncomplete=()=>a(r),h.onabort=()=>n(h.error),h.onerror=()=>n(h.error))},t.onsuccess=()=>a(t.result),t.onblocked=()=>n(new Error("IndexedDB open blocked")),t.onerror=()=>n(t.error)}),this.dbPromise)}async tx(s){return(await this.open()).transaction(this.storeName,s).objectStore(this.storeName)}async get(s){const e=await this.tx("readonly");return new Promise((t,i)=>{const a=e.get(s);a.onsuccess=()=>t(a.result||null),a.onerror=()=>i(a.error)})}async set(s){const e=await this.tx("readwrite");return new Promise((t,i)=>{const a=e.put(s);a.onsuccess=()=>t(),a.onerror=()=>i(a.error)})}async delete(s){const e=await this.tx("readwrite");return new Promise((t,i)=>{const a=e.delete(s);a.onsuccess=()=>t(),a.onerror=()=>i(a.error)})}async clear(){const s=await this.tx("readwrite");return new Promise((e,t)=>{const i=s.clear();i.onsuccess=()=>e(),i.onerror=()=>t(i.error)})}async cleanupExpired(s=Date.now()){const a=(await this.open()).transaction(this.storeName,"readwrite").objectStore(this.storeName).index("expiresAt");return new Promise((n,r)=>{const h=IDBKeyRange.upperBound(s),p=a.openCursor(h);p.onsuccess=()=>{const o=p.result;o?(o.delete(),o.continue()):n()},p.onerror=()=>r(p.error)})}}class ls{constructor(s={cacheName:"apihive-request-cache"}){this.name="@apihive/adapter-simple-cache",this.priority={requestInterceptor:0,responseInterceptor:0,errorInterceptor:0},this.use=[ns];const{cacheName:e,filter:t,clear:i=!1}=s;if(!e)throw new Error("cacheName is cannot be an empty string");this.filter=t,this.clearOnAttach=!!i,this.store=new hs(e)}onAttach(s){this.factory=s;try{this.clearOnAttach?this.store.clear():this.readyPromise=this.store.cleanupExpired(Date.now())}catch{}}getRequestInterceptors(){return[async({config:s,controls:e})=>{await this.readyPromise;const{ttlSeconds:t,hashBody:i}=this.resolveCacheMetaConfig(s.meta);if(!t||!this.isExplicitCache(s)&&this.filter&&!this.filter(s))return;e.finaliseURL();let n;try{n=e.getHash({includeBody:i})}catch{return}try{const r=await this.store.get(n),h=Date.now();if(r&&r.expiresAt>h)return r.body}catch(r){this.factory.logger.error("Failed to read cache entry",r)}}]}getResponseInterceptors(){return[async({response:e,config:t,controls:i})=>{await this.readyPromise;const{ttlSeconds:a,hashBody:n}=this.resolveCacheMetaConfig(t.meta);if(!a||!this.isExplicitCache(t)&&this.filter&&!this.filter(t)||!e||!e.ok)return;const h=await this.readResponseSafely(e,t);if(h===null)return;let p;try{p=i.getHash({includeBody:n})}catch{return}const o=Date.now(),c={hash:p,body:h,createdAt:o,expiresAt:o+a*1e3};try{await this.store.set(c)}catch(E){this.factory.logger.error("Failed to write cache entry",E)}}]}async clearCache(){await this.store.clear()}isJSONResponse(s,e){return s.jsonMimeTypes.some(t=>new RegExp(t,"i").test(e))}isTextResponse(s,e){return s.textMimeTypes.some(t=>new RegExp(t,"i").test(e))}async readResponseSafely(s,e){const t=s.headers.get("content-type")?.split(/;\s?/)[0]||"";try{if(this.isJSONResponse(e,t))return await s.clone().json()}catch{}try{if(this.isTextResponse(e,t))return await s.clone().text()}catch{}return null}resolveCacheMetaConfig(s){if(typeof s?.cache>"u")return{ttlSeconds:0,hashBody:!1};if(rs(s.cache))throw new Error("Cache config must be a number or an object with ttlSeconds and/or hashBody properties");const e=typeof s?.cache=="number"?s?.cache:s?.cache.ttlSeconds||0,t=s?.cache?.hashBody===!0||!1;return{ttlSeconds:e,hashBody:t}}isExplicitCache(s){const{ttlSeconds:e}=this.resolveCacheMetaConfig(s.meta?.api?.apiMeta),t=s.meta?.api?.endpoint?.meta||{},i=Object.prototype.hasOwnProperty.call(t,"cache"),{ttlSeconds:a}=this.resolveCacheMetaConfig(s.meta);return!!(i||typeof e<"u"&&a!==e)}}const os={userById:{userId:{values:[1,2,3,4,5,6,7,8,9,10]}},postById:{postId:{values:[1,2,3,4,5,6,7,8,9,10]}}},L={name:"default",endpoints:{userById:{target:"https://jsonplaceholder.typicode.com/users/{{userId}}",meta:{cache:30},method:"GET"},postById:{target:"https://jsonplaceholder.typicode.com/posts/{{postId}}",method:"GET"}}};class ps{constructor(){const s=fetch;globalThis.fetch=(e,t)=>(d.fetchCount++,s(e,t)),this.factory=new Y().withAPIConfig(L).use(Z).withAdapter(new ls),w(()=>[d.currentEndpoint,d.currentEndpointParams],()=>{d.currentRequestHash="",d.fetchCount=0,d.runServiceCount=0,d.result=null},{deep:!0})}get endpoints(){return Object.keys(L.endpoints)}get endpointParams(){return os[d.currentEndpoint]}async runService(s,e,t){const i=d.fetchCount,a=this.factory.createAPIRequest(s).withResponseBodyTransformers(async h=>(d.runServiceCount++,h));Object.keys(e).length&&a.withURLParams(e),t&&Object.keys(t).length&&a.withJSONBody(t);const n=await a.execute(),r=a.getHash();d.currentRequestHash=r,d.result=n,i<d.fetchCount&&(d.expirations[r]=Date.now()+L.endpoints[s].meta.cache*1e3)}}const ds={class:"simple-request-cache-adapter-demo demo pico"},cs={class:"controls"},ks=["value"],us=["for"],Es=["id","onUpdate:modelValue"],gs=["value"],ys={class:"controls"},fs={class:"controls"},ms={key:0},Fs={key:0},ws={key:1},Cs=U({__name:"SimpleRequestCacheAdapterDemo",setup(l){const s=D(!1),e=D(!1),t=D(-1);let i;return M(()=>{i=new ps}),w(()=>d.fetchCount,()=>{e.value=d.fetchCount>0,setTimeout(()=>{e.value=!1},700)}),w(()=>d.runServiceCount,()=>{s.value=d.runServiceCount>0,setTimeout(()=>{s.value=!1},700)}),w(()=>d.currentEndpoint,()=>{const a=i.endpointParams;if(a)for(const n of Object.keys(a))d.currentEndpointParams[n]=a[n].values[0]}),w(()=>[d.currentRequestHash,d.runServiceCount,d.expirations[d.currentRequestHash||"dummy"]],()=>{d.currentRequestHash&&(t.value=Math.round((d.expirations[d.currentRequestHash]-Date.now())/1e3))}),setInterval(()=>{d.currentRequestHash&&t.value>0&&t.value--},1e3),(a,n)=>(y(),g("div",ds,[k("form",{onSubmit:n[2]||(n[2]=j(()=>{},["prevent"]))},[k("div",cs,[k("div",null,[n[3]||(n[3]=k("label",{for:"service"},"Service",-1)),P(k("select",{name:"service",id:"service",style:{"max-width":"fit-content"},"onUpdate:modelValue":n[0]||(n[0]=r=>u(d).currentEndpoint=r)},[(y(!0),g(b,null,A(u(i).endpoints,r=>(y(),g("option",{key:r,value:r},m(r),9,ks))),128))],512),[[T,u(d).currentEndpoint]])]),(y(!0),g(b,null,A(Object.keys(u(i).endpointParams),r=>(y(),g("div",{key:r},[k("label",{for:r},m(r),9,us),P(k("select",{id:r,name:"param","onUpdate:modelValue":h=>u(d).currentEndpointParams[r]=h},[(y(!0),g(b,null,A(u(i).endpointParams[r].values,h=>(y(),g("option",{key:h,value:h},m(h),9,gs))),128))],8,Es),[[T,u(d).currentEndpointParams[r]]])]))),128)),n[4]||(n[4]=k("div",{class:"grow"},null,-1)),k("button",{onClick:n[1]||(n[1]=r=>u(i).runService(u(d).currentEndpoint,u(d).currentEndpointParams))},"Run")]),n[5]||(n[5]=k("hr",null,null,-1))],32),k("div",null,[k("div",ys,[k("button",{disabled:"",class:q(["animate__animated outline secondary animate__faster",{animate__pulse:e.value}])},"Fetch count: "+m(u(d).fetchCount),3),k("button",{disabled:"",class:q(["animate__animated outline secondary animate__faster",{animate__pulse:s.value}])},"Run service count: "+m(u(d).runServiceCount),3)]),n[8]||(n[8]=k("hr",null,null,-1)),k("div",fs,[n[6]||(n[6]=k("div",null,"Result",-1)),n[7]||(n[7]=k("div",{class:"grow"},null,-1)),u(d).currentRequestHash?(y(),g("span",ms,[t.value>0?(y(),g("span",Fs,"Expires in "+m(t.value)+"s",1)):(y(),g("span",ws,"Will fetch again"))])):S("",!0)]),u(d).result?(y(),g("pre",{key:0,class:q(["animate__animated animate__faster",{animate__pulse:s.value}])},m(u(d).result),3)):S("",!0)])]))}}),Rs=z(Cs,[["__scopeId","data-v-2ca673fa"]]),As=JSON.parse('{"title":"Demo","description":"","frontmatter":{"title":"Demo"},"headers":[],"relativePath":"demo/index.md","filePath":"demo/index.md"}'),Ds={name:"demo/index.md"},qs=Object.assign(Ds,{setup(l){return(s,e)=>{const t=N("ClientOnly");return y(),g("div",null,[e[0]||(e[0]=k("h1",{id:"demo-cache-monitoring",tabindex:"-1"},[J("DEMO: Cache Monitoring "),k("a",{class:"header-anchor",href:"#demo-cache-monitoring","aria-label":"Permalink to “DEMO: Cache Monitoring”"},"​")],-1)),e[1]||(e[1]=k("p",null,"Here's a simple demo of how to use the simple request cache adapter.",-1)),e[2]||(e[2]=k("p",null,"Choose the service from the dropdown to select the API to call and observe the cache in action.",-1)),e[3]||(e[3]=k("p",null,"Requests for the getUserById endpoint are cached for 30 seconds, while requests for the getPostById endpoint are not cached.",-1)),_(t,null,{default:V(()=>[_(Rs)]),_:1}),e[4]||(e[4]=$(`<div class="vp-code-group"><div class="tabs"><input type="radio" name="group-14" id="tab-15" checked><label data-title="API Config" for="tab-15">API Config</label><input type="radio" name="group-14" id="tab-16"><label data-title="Demo Controller" for="tab-16">Demo Controller</label></div><div class="blocks"><div class="language-ts active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { APIConfig } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@apihive/core&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> endpointParamsConfig</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Record</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Record</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">values</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] }&gt;&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    userById : {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        userId : {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            values : [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    postById : {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        postId : {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            values : [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> apiConfig</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> APIConfig</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name : </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;default&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    endpoints : {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        userById : {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            target : </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://jsonplaceholder.typicode.com/users/{{userId}}&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            meta : {</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                cache: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            method : </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;GET&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        postById : {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            target : </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://jsonplaceholder.typicode.com/posts/{{postId}}&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            method : </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;GET&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> apiConfig;</span></span></code></pre></div><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { HTTPRequestFactory } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@apihive/core&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> adaptersFeature </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@apihive/core/features/adapters&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { watch } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SimpleRequestCacheAdapter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;../../src&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> apiConfig, { endpointParamsConfig } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./api-config&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./demo-model&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DemoController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> factory</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HTTPRequestFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> globalFetch</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fetch;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        (globalThis </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetch</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            model.fetchCount</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> globalFetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(url, init);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        };</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.factory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HTTPRequestFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withAPIConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(apiConfig)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(adaptersFeature)</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withAdapter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SimpleRequestCacheAdapter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        watch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [model.currentEndpoint, model.currentEndpointParams], () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            model.currentRequestHash </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            model.fetchCount </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            model.runServiceCount </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            model.result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }, { deep : </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    get</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> endpoints</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">keys</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(apiConfig.endpoints);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    get</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> endpointParams</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endpointParamsConfig[model.currentEndpoint];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> runService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">params</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Record</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">body</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Record</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fetches</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> model.fetchCount;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> request</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.factory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createAPIRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withResponseBodyTransformers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                model.runServiceCount</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            })</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">keys</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(params).</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withURLParams</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(params);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(body </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">keys</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(body).</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withJSONBody</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(body);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> hash</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getHash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        model.currentRequestHash </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hash;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        model.result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fetches </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> model.fetchCount) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            model.expirations[hash] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Date.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> apiConfig.endpoints[name]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.meta</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.cache</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></div></div>`,1))])}}});export{As as __pageData,qs as default};
